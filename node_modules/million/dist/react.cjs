'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const react = require('react');
const block$1 = require('./chunks/block.cjs');
const constants$1 = require('./chunks/constants.cjs');
const utils = require('./chunks/utils.cjs');
const constants = require('./chunks/constants2.cjs');
require('react-dom/client');

const block = (fn, { block: compiledBlock, shouldUpdate, svg, as } = {}) => {
  const block2 = fn ? block$1.block(fn, utils.unwrap, shouldUpdate, svg) : compiledBlock;
  const defaultType = svg ? constants.SVG_RENDER_SCOPE : constants.RENDER_SCOPE;
  const MillionBlock = (props) => {
    const ref = react.useRef(null);
    const patch = react.useRef(null);
    props = utils.processProps(props);
    patch.current?.(props);
    const effect = react.useCallback(() => {
      const currentBlock = block2(props, props.key);
      if (ref.current && patch.current === null) {
        block$1.queueMicrotask$(() => {
          block$1.mount$.call(currentBlock, ref.current, null);
        });
        patch.current = (props2) => {
          block$1.queueMicrotask$(() => {
            block$1.patch(currentBlock, block2(props2, props2.key, shouldUpdate));
          });
        };
      }
    }, []);
    const marker = react.useMemo(() => {
      return react.createElement(as ?? defaultType, { ref });
    }, []);
    const vnode = react.createElement(
      react.Fragment,
      null,
      marker,
      react.createElement(constants.Effect, { effect })
    );
    return vnode;
  };
  if (!constants$1.MapHas$.call(constants.REGISTRY, MillionBlock)) {
    constants$1.MapSet$.call(constants.REGISTRY, MillionBlock, block2);
  }
  return MillionBlock;
};

const MillionArray = ({
  each,
  children,
  memo: memo2,
  svg,
  as,
  ...rest
}) => {
  const ref = react.useRef(null);
  const fragmentRef = react.useRef(null);
  const cache = react.useRef({
    each: null,
    children: null,
    mounted: null
  });
  if (fragmentRef.current && (each !== cache.current.each || !memo2)) {
    block$1.queueMicrotask$(() => {
      const newChildren = createChildren(each, children, cache, memo2);
      block$1.arrayPatch$.call(fragmentRef.current, block$1.mapArray(newChildren));
    });
  }
  const defaultType = svg ? constants.SVG_RENDER_SCOPE : constants.RENDER_SCOPE;
  const MillionFor = react.createElement(as ?? defaultType, { ...rest, ref });
  react.useEffect(() => {
    if (!ref.current || fragmentRef.current)
      return;
    block$1.queueMicrotask$(() => {
      if (cache.current.mounted)
        ref.current.textContent = "";
      const newChildren = createChildren(each, children, cache, memo2);
      fragmentRef.current = block$1.mapArray(newChildren);
      if (!constants$1.MapHas$.call(constants.REGISTRY, MillionFor)) {
        constants$1.MapSet$.call(constants.REGISTRY, MillionFor, fragmentRef.current);
      }
      block$1.arrayMount$.call(fragmentRef.current, ref.current);
      cache.current.mounted = true;
    });
  }, [ref.current]);
  return MillionFor;
};
const typedMemo = react.memo;
const For = typedMemo(MillionArray);
const createChildren = (each, getComponent, cache, memo2) => {
  const children = Array(each.length);
  const currentCache = cache.current;
  for (let i = 0, l = each.length; i < l; ++i) {
    if (memo2 && currentCache.each && currentCache.each[i] === each[i]) {
      children[i] = currentCache.children?.[i];
      continue;
    }
    const vnode = getComponent(each[i], i);
    if (constants$1.MapHas$.call(constants.REGISTRY, vnode.type)) {
      if (!currentCache.block) {
        currentCache.block = constants$1.MapGet$.call(constants.REGISTRY, vnode.type);
      }
      children[i] = currentCache.block(vnode.props);
      continue;
    }
    if (typeof vnode.type === "function" && "callable" in vnode.type) {
      const puppetComponent = vnode.type(vnode.props);
      if (constants$1.MapHas$.call(constants.REGISTRY, puppetComponent.type)) {
        const puppetBlock = constants$1.MapGet$.call(constants.REGISTRY, puppetComponent.type);
        if (typeof puppetBlock === "function") {
          children[i] = puppetBlock(puppetComponent.props);
          continue;
        }
      }
    }
    const block = block$1.block((props) => props?.scope);
    const currentBlock = (props) => {
      return block(
        {
          scope: utils.renderReactScope(react.createElement(vnode.type, props))
        },
        vnode.key ? String(vnode.key) : void 0
      );
    };
    constants$1.MapSet$.call(constants.REGISTRY, vnode.type, currentBlock);
    currentCache.block = currentBlock;
    children[i] = currentBlock(vnode.props);
  }
  currentCache.each = each;
  currentCache.children = children;
  return children;
};

const macro = (expression) => expression;

exports.renderReactScope = utils.renderReactScope;
exports.unwrap = utils.unwrap;
exports.REGISTRY = constants.REGISTRY;
exports.For = For;
exports.block = block;
exports.macro = macro;
